package views

import (
	"time"
	"fmt"
	"strconv"
    "scavenger/internal/models"
)

templ ReportsPage(disciplines []models.Discipline, reports []models.LabReport, filterParams models.ReportFilterParams) {
	@Base("Управление отчетами", reportsPage(disciplines, reports, filterParams))
}

templ reportsPage(disciplines []models.Discipline, reports []models.LabReport, filterParams models.ReportFilterParams) {
    <div class="container-fluid">
		<!-- Хлебные крошки -->
		<nav aria-label="breadcrumb" class="mb-4">
			<ol class="breadcrumb">
				<li class="breadcrumb-item"><a href="/">Главная</a></li>
				<li class="breadcrumb-item active">Отчеты студентов</li>
			</ol>
		</nav>

		{{
			var disc models.Discipline

			for _, d := range disciplines {
				if d.ID == filterParams.DisciplineID {
					disc = d
				}
			}
		}}

		<!-- Заголовок и статистика -->
		<div class="row mb-4">
			<div class="col-md-8">
				<h3>
					<i class="fas fa-file-alt"></i>
					Управление отчетами
				</h3>
				<p class="text-muted">Просмотр и проверка отчетов студентов</p>
			</div>
			<div class="col-md-4">
				<div class="card bg-light">
					<div class="card-body py-2">
						<div class="row text-center">
							<div class="col-4 border-end">
								<div>
									<h5 class="mb-0">{ len(reports) }</h5>
									<small class="text-muted">Всего</small>
								</div>
							</div>
							<div class="col-4 border-end">
								<div>
									<h5 class="mb-0">{ countReportsByStatus(reports, "submitted") }</h5>
									<small class="text-muted">На проверке</small>
								</div>
							</div>
							<div class="col-4">
								<div>
									<h5 class="mb-0">{ countReportsByStatus(reports, "graded") }</h5>
									<small class="text-muted">Проверено</small>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Фильтры -->
		<div class="card mb-4">
			<div class="card-header btn btn-outline-info btn-block"
					data-bs-toggle="collapse"
					data-bs-target="#filterBody"
					aria-controls="filterBody">
				<h5 class="card-title mb-0">
					<i class="fas fa-filter"></i> Фильтры
				</h5>
			</div>
			<div id="filterBody" class="collapse">
				<div class="card-body">
					<form hx-get="/admin/reports/table" hx-target="#reports-table" hx-trigger="change, keyup delay:500ms">
						<div class="row g-3">
							<div class="col-md-3">
								<label class="form-label">Дисциплина</label>
								<select name="discipline_id" class="form-select" 
										hx-get="/admin/reports/labs"
										hx-target="#lab-select"
										hx-trigger="change">
									<option value="">Все дисциплины</option>
									for _, disc := range disciplines {
										if filterParams.DisciplineID == disc.ID {
											<option value={ disc.ID } selected>{ disc.Name }</option>
										} else {
											<option value={ disc.ID }>{ disc.Name }</option>
										}
									}
								</select>
							</div>
							<div class="col-md-3">
								<label class="form-label">Лабораторная работа</label>
								<select id="lab-select" name="lab_id" class="form-select" hx-trigger="change">
									<option value="">Все работы</option>
									for _, lab := range disc.Labs {
										if strconv.Itoa(filterParams.LabID) == lab.ID {
											<option value={ lab.ID } selected>{ lab.Name }</option>
										} else {
											<option value={ lab.ID }>{ lab.Name }</option>
										}
									}
								</select>
							</div>
							<div class="col-md-2">
								<label class="form-label">Статус</label>
								<select name="status" class="form-select" hx-trigger="change">
									<option value="">Все статусы</option>
									if filterParams.Status == "submitted" {
										<option value="submitted" selected>На проверке</option>
									} else {
										<option value="submitted">На проверке</option>
									}
									if filterParams.Status == "graded" {
										<option value="graded" selected>Проверено</option>
									} else {
										<option value="graded">Проверено</option>
									}
								</select>
							</div>
							<div class="col-md-2">
								<label class="form-label">Оценка</label>
								<select name="grade" class="form-select" hx-trigger="change">
									<option value="">Все оценки</option>
									if filterParams.Grade == 5 {
										<option value="5" selected>5</option>
									} else {
										<option value="5">5</option>
									}
									if filterParams.Grade == 4 {
										<option value="4" selected>4</option>
									} else {
										<option value="4">4</option>
									}
									if filterParams.Grade == 3 {
										<option value="3" selected>3</option>
									} else {
										<option value="3">3</option>
									}
									if filterParams.Grade == 2 {
										<option value="2" selected>2</option>
									} else {
										<option value="2">2</option>
									}
								</select>
							</div>
							<div class="col-md-2">
								<label class="form-label">Сортировка</label>
								<select name="sort_by" class="form-select" hx-trigger="change">
									if filterParams.SortBy == "uploaded_at" {
										<option value="uploaded_at" selected>Дате загрузки</option>
									} else {
										<option value="uploaded_at">Дате загрузки</option>
									}
									if filterParams.SortBy == "student" {
										<option value="student" selected>Студенту</option>
									} else {
										<option value="student">Студенту</option>
									}
									if filterParams.SortBy == "deadline" {
										<option value="deadline" selected>Сроку сдачи</option>
									} else {
										<option value="deadline">Сроку сдачи</option>
									}
									if filterParams.SortBy == "grade" {
										<option value="grade" selected>Оценке</option>
									} else {
										<option value="grade">Оценке</option>
									}
								</select>
							</div>
						</div>
						<div class="row mt-3">
							<div class="col-md-6">
								<label class="form-label">Поиск по студенту</label>
								<input type="text" 
									   name="student_search" 
									   class="form-control" 
									   placeholder="ФИО студента..."
									   value={ filterParams.StudentSearch }
									   hx-trigger="keyup changed delay:500">
							</div>
							<div class="col-md-3">
								<label class="form-label">Период</label>
								<select name="period" class="form-select" hx-trigger="change">
									<option value="">Все время</option>
									if filterParams.Period == "today" {
										<option value="today" selected>Сегодня</option>
									} else {
										<option value="today">Сегодня</option>
									}
									if filterParams.Period == "week" {
										<option value="week" selected>За неделю</option>
									} else {
										<option value="week">За неделю</option>
									}
									if filterParams.Period == "month" {
										<option value="month" selected>За месяц</option>
									} else {
										<option value="month">За месяц</option>
									}
								</select>
							</div>
							<div class="col-md-3 d-flex align-items-end">
								<button type="button" 
										class="btn btn-outline-secondary w-100" 
										hx-get="/admin/reports/table" 
										hx-target="#reports-table">
									<i class="fas fa-refresh"></i> Сбросить
								</button>
							</div>
						</div>
					</form>
				</div>
			</div>
		</div>

		<!-- Таблица отчетов -->
		<div id="reports-table">
			@ReportsTable(reports, filterParams)
		</div>
	</div>

	<!-- HTMX конфигурация -->
	<script>
		// Показ индикатора загрузки
		document.addEventListener('htmx:beforeRequest', function(e) {
			const target = e.detail.target;
			if (target.id === 'reports-table') {
				target.innerHTML = `
					<div class="text-center py-4">
						<div class="spinner-border text-primary" role="status">
							<span class="visually-hidden">Загрузка...</span>
						</div>
						<p class="mt-2 text-muted">Загрузка данных...</p>
					</div>
				`;
			}
		});

		// Обработка ошибок
		document.addEventListener('htmx:responseError', function(e) {
			const target = e.detail.target;
			if (target.id === 'reports-table') {
				target.innerHTML = `
					<div class="alert alert-danger">
						<i class="fas fa-exclamation-triangle"></i>
						Ошибка загрузки данных. Попробуйте еще раз.
					</div>
				`;
			}
		});
	</script>
}

templ ReportsTable(reports []models.LabReport, filterParams models.ReportFilterParams) {
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                Найдено отчетов: { len(reports) }
            </h5>
        </div>
        <div class="card-body">
            if len(reports) > 0 {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>
                                    <a href="#" 
                                       hx-get={ buildSortURL(filterParams, "student") }
                                       hx-target="#reports-table">
                                        Студент
                                        if filterParams.SortBy == "student" {
											if filterParams.SortOrder == "asc" {
                                            	<i class="fas fa-sort-up"></i>
											} else {
                                            	<i class="fas fa-sort-down"></i>
											}
                                        }
                                    </a>
                                </th>
                                <th>Группа</th>
                                <th>
                                    <a href="#" 
                                       hx-get={ buildSortURL(filterParams, "discipline") }
                                       hx-target="#reports-table">
                                        Дисциплина
                                        if filterParams.SortBy == "discipline" {
											if filterParams.SortOrder == "asc" {
                                            	<i class="fas fa-sort-up"></i>
											} else {
                                            	<i class="fas fa-sort-down"></i>
											}
                                        }
                                    </a>
                                </th>
                                <th>Лабораторная</th>
                                <th>
                                    <a href="#" 
                                       hx-get={ buildSortURL(filterParams, "uploaded_at") }
                                       hx-target="#reports-table">
                                        Дата загрузки
                                        if filterParams.SortBy == "uploaded_at" {
											if filterParams.SortOrder == "asc" {
                                            	<i class="fas fa-sort-up"></i>
											} else {
                                            	<i class="fas fa-sort-down"></i>
											}
                                        }
                                    </a>
                                </th>
                                <th>Статус</th>
                                <th>
                                    <a href="#" 
                                       hx-get={ buildSortURL(filterParams, "grade") }
                                       hx-target="#reports-table">
                                        Оценка
                                        if filterParams.SortBy == "grade" {
											if filterParams.SortOrder == "asc" {
                                            	<i class="fas fa-sort-up"></i>
											} else {
                                            	<i class="fas fa-sort-down"></i>
											}
                                        }
                                    </a>
                                </th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody>
                            for _, report := range reports {
                                <tr>
                                    <td>
                                        <strong>{ report.Student.Name }</strong>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">{ report.Student.GroupName }</span>
                                    </td>
                                    <td>{ report.Discipline.Name }</td>
                                    <td>
                                        <strong>{ report.Lab.Name }</strong>
                                        <br>
                                        <small class="text-muted">
                                            Срок: { report.Lab.FormatDeadline() }
                                        </small>
                                    </td>
                                    <td>
                                        { report.UploadedAt.Format("02.01.2006 15:04") }
                                        <br>
                                        <small class="text-muted">{ formatTimeAgo(report.UploadedAt) }</small>
                                    </td>
                                    <td>
                                        <span class={ "badge bg-" + report.GetStatusBadge() }>
                                            { report.GetStatusText() }
                                        </span>
                                    </td>
                                    <td>
                                        if report.Status == "graded" {
                                            <span class="badge bg-primary">{ report.Grade }</span>
                                        } else {
                                            <span class="text-muted">—</span>
                                        }
                                    </td>
                                    <td>
										<div class="btn-group btn-group-sm">
                                            <a href={ "/admin/reports/" + strconv.Itoa(report.ID) + "/review" }
                                               class="btn btn-outline-primary"
                                               title="Проверить и оценить">
                                                <i class="fas fa-check"></i> Проверить
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Пагинация -->
                if filterParams.TotalPages > 1 {
                    <nav aria-label="Навигация по страницам" class="mt-4">
                        <ul class="pagination justify-content-center">
                            if filterParams.Page > 1 {
                                <li class="page-item">
                                    <a class="page-link" 
                                       hx-get={ buildPageURL(filterParams, filterParams.Page - 1) }
                                       hx-target="#reports-table">
                                        Назад
                                    </a>
                                </li>
                            }

                            for i := max(1, filterParams.Page - 2); i <= min(filterParams.TotalPages, filterParams.Page + 2); i++ {
								if i == filterParams.Page {
								<li class="page-item active">
									<a class="page-link" 
                                       hx-get={ buildPageURL(filterParams, i) }
                                       hx-target="#reports-table">
                                        { i }
                                    </a>
                                </li>
								} else {
								<li class="page-item ">
									<a class="page-link" 
                                       hx-get={ buildPageURL(filterParams, i) }
                                       hx-target="#reports-table">
                                        { i }
                                    </a>
                                </li>
								}
                                    
                            }

                            if filterParams.Page < filterParams.TotalPages {
                                <li class="page-item">
                                    <a class="page-link" 
                                       hx-get={ buildPageURL(filterParams, filterParams.Page + 1) }
                                       hx-target="#reports-table">
                                        Вперед
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                } 
			} else {
				<div class="text-center py-5">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Отчеты не найдены</h5>
                    <p class="text-muted">Попробуйте изменить параметры фильтрации</p>
                </div>
			}
        </div>
    </div>

    <script>
        function toggleSelectAll(checkbox) {
            const checkboxes = document.querySelectorAll('input.report-checkbox');
            checkboxes.forEach(cb => cb.checked = checkbox.checked);
        }

        function downloadReport(reportId) {
            window.open('/admin/reports/' + reportId + '/download', '_blank');
        }
    </script>
}

func countReportsByStatus(reports []models.LabReport, status string) int {
    count := 0
    for _, report := range reports {
        if report.Status == status {
            count++
        }
    }
    return count
}

func formatTimeAgo(t time.Time) string {
    duration := time.Since(t)
    if duration.Hours() < 24 {
        return fmt.Sprintf("%.0f ч. назад", duration.Hours())
    }
    return fmt.Sprintf("%.0f д. назад", duration.Hours()/24)
}

func isLate(report models.LabReport) bool {
    return report.UploadedAt.After(report.Lab.Deadline)
}

func buildSortURL(params models.ReportFilterParams, sortBy string) string {
    url := "/admin/reports/table?"
    if params.DisciplineID > 0 {
        url += fmt.Sprintf("discipline_id=%d&", params.DisciplineID)
    }
    if params.LabID > 0 {
        url += fmt.Sprintf("lab_id=%d&", params.LabID)
    }
    if params.Status != "" {
        url += fmt.Sprintf("status=%s&", params.Status)
    }
    if params.Grade > 0 {
        url += fmt.Sprintf("grade=%d&", params.Grade)
    }
    if params.StudentSearch != "" {
        url += fmt.Sprintf("student_search=%s&", params.StudentSearch)
    }
    if params.Period != "" {
        url += fmt.Sprintf("period=%s&", params.Period)
    }
    
    // Определяем порядок сортировки
    sortOrder := "desc"
    if params.SortBy == sortBy && params.SortOrder == "desc" {
        sortOrder = "asc"
    }
    
    url += fmt.Sprintf("sort_by=%s&sort_order=%s", sortBy, sortOrder)
    return url
}

func buildPageURL(params models.ReportFilterParams, page int) string {
    url := fmt.Sprintf("/admin/reports/table?page=%d&", page)
    if params.DisciplineID > 0 {
        url += fmt.Sprintf("discipline_id=%d&", params.DisciplineID)
    }
    if params.LabID > 0 {
        url += fmt.Sprintf("lab_id=%d&", params.LabID)
    }
    if params.Status != "" {
        url += fmt.Sprintf("status=%s&", params.Status)
    }
    if params.Grade > 0 {
        url += fmt.Sprintf("grade=%d&", params.Grade)
    }
    if params.StudentSearch != "" {
        url += fmt.Sprintf("student_search=%s&", params.StudentSearch)
    }
    if params.Period != "" {
        url += fmt.Sprintf("period=%s&", params.Period)
    }
    if params.SortBy != "" {
        url += fmt.Sprintf("sort_by=%s&sort_order=%s", params.SortBy, params.SortOrder)
    }
    return url
}

func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}
